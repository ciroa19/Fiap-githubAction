name: .NET CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest
     # Passo 1: Fazer o checkout do código-fonte do repositório
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      # Passo 2: Configurar o ambiente para usar a versão .NET 8.0
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'
          
      # Passo 3: Restaurar as dependências para a solução
      - name: Restore dependencies
        run: dotnet restore ./tech-challenge-01-main/TechChallenge01.sln  
        
      # Passo 4: Construir a solução completa para garantir que todos os projetos são compilados
      - name: Build Solution
        run: dotnet build ./tech-challenge-01-main/TechChallenge01.sln --configuration Release  
        
      # Passo 5: Executar testes de integração, filtrando apenas os testes de integração se houver uma filtragem específica
      - name: Run Integration Tests
        run: dotnet test ./tech-challenge-01-main/tests/TechChallenge01.Api.Tests/TechChallenge01.Api.Tests.csproj --configuration Release --no-build   --filter FullyQualifiedName~IntegrationTests
      
      # Passo 6: Executar testes unitários específicos do projeto de Domínio
      - name: Run Unit Tests - Domain
        run: dotnet test ./tech-challenge-01-main/TechChallenge01.Domain.Tests/TechChallenge01.Domain.Tests.csproj --configuration Release --no-build   --logger trx
        
      # Passo 7: Executar testes unitários específicos do projeto de API
      - name: Run Unit Tests - Application
        run: dotnet test ./tech-challenge-01-main/tests/TechChallenge01.Application.Tests/TechChallenge01.Application.Tests.csproj  --configuration Release --no-build   --logger trx
